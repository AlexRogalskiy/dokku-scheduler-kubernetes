#!/usr/bin/env bash
set -eo pipefail
[[ $DOKKU_TRACE ]] && set -x
source "$PLUGIN_CORE_AVAILABLE_PATH/common/functions"
source "$PLUGIN_CORE_AVAILABLE_PATH/common/property-functions"
source "$PLUGIN_AVAILABLE_PATH/config/functions"
source "$PLUGIN_AVAILABLE_PATH/scheduler-kubernetes/internal-functions"

fn-strip-ports() {
  declare DEPLOYMENT_FILE="$1"
  local TMP_FILE=$(mktemp "/tmp/${FUNCNAME[0]}.XXXX")

  jq -M 'del(.spec.template.spec.containers[0].ports)' <"$DEPLOYMENT_FILE" >"$TMP_FILE"
  mv "$TMP_FILE" "$DEPLOYMENT_FILE"
}

fn-set-env-vars() {
  declare APP="$1" DEPLOYMENT_FILE="$2"
  local TMP_FILE=$(mktemp "/tmp/${FUNCNAME[0]}.XXXX")

  jq -M --argjson data "$(config_export app "$APP" --format json-list --merged)" '.spec.template.spec.containers[0].env += $data' <"$DEPLOYMENT_FILE" >"$TMP_FILE"
  mv "$TMP_FILE" "$DEPLOYMENT_FILE"
}

fn-set-image-pull-secrets() {
  declare IMAGE_PULL_SECRETS="$1" DEPLOYMENT_FILE="$2"
  local TMP_FILE=$(mktemp "/tmp/${FUNCNAME[0]}.XXXX")
  trap 'rm -rf "$TMP_FILE" > /dev/null' RETURN INT TERM EXIT

  if [[ -n "$IMAGE_PULL_SECRETS" ]]; then
    IMAGE_PULL_SECRETS="$IMAGE_PULL_SECRETS" jq -M ".spec.template.spec.imagePullSecrets[0].name = env.IMAGE_PULL_SECRETS" <"$DEPLOYMENT_FILE" >"$TMP_FILE"
    mv "$TMP_FILE" "$DEPLOYMENT_FILE"
  fi
}

fn-set-ports() {
  declare APP="$1" DEPLOYMENT_FILE="$2"
  local TMP_FILE=$(mktemp "/tmp/${FUNCNAME[0]}.XXXX")
  trap 'rm -rf "$TMP_FILE" > /dev/null' RETURN INT TERM EXIT

  if is_image_herokuish_based "$IMAGE"; then
    jq -M --argjson data "[{\"name\": \"PORT\", \"value\": \"5000\"}]" '.spec.template.spec.containers[0].env += $data' <"$DEPLOYMENT_FILE" >"$TMP_FILE"
    mv "$TMP_FILE" "$DEPLOYMENT_FILE"
  fi
}

fn-set-resource-constraints() {
  declare APP="$1" PROC_TYPE="$2" DEPLOYMENT_FILE="$3"
  local TMP_FILE=$(mktemp "/tmp/${FUNCNAME[0]}.XXXX")
  trap 'rm -rf "$TMP_FILE" > /dev/null' RETURN INT TERM EXIT

  RESOURCE_LIMITS_CPU=$(plugn trigger resource-get-property "$APP" "$PROC_TYPE" "limit" "cpu" 2>/dev/null || true)
  RESOURCE_LIMITS_NVIDIA_GPU=$(plugn trigger resource-get-property "$APP" "$PROC_TYPE" "limit" "nvidia-gpu" 2>/dev/null || true)
  RESOURCE_LIMITS_MEMORY=$(plugn trigger resource-get-property "$APP" "$PROC_TYPE" "limit" "memory" 2>/dev/null || true)
  RESOURCE_REQUESTS_CPU=$(plugn trigger resource-get-property "$APP" "$PROC_TYPE" "reserve" "cpu" 2>/dev/null || true)
  RESOURCE_REQUESTS_MEMORY=$(plugn trigger resource-get-property "$APP" "$PROC_TYPE" "reserve" "memory" 2>/dev/null || true)

  if [[ -n "$RESOURCE_LIMITS_CPU" ]]; then
    RESOURCE_LIMITS_CPU="$RESOURCE_LIMITS_CPU" jq -M ".spec.template.spec.containers[0].resources.limits.cpu = env.RESOURCE_LIMITS_CPU" <"$DEPLOYMENT_FILE" >"$TMP_FILE"
    mv "$TMP_FILE" "$DEPLOYMENT_FILE"
  fi

  if [[ -n "$RESOURCE_LIMITS_NVIDIA_GPU" ]]; then
    RESOURCE_LIMITS_NVIDIA_GPU="$RESOURCE_LIMITS_NVIDIA_GPU" jq -M '.spec.template.spec.containers[0].resources.limits.["nvidia.com/gpu"] = env.RESOURCE_LIMITS_NVIDIA_GPU' <"$DEPLOYMENT_FILE" >"$TMP_FILE"
    mv "$TMP_FILE" "$DEPLOYMENT_FILE"
  fi

  if [[ -n "$RESOURCE_LIMITS_MEMORY" ]]; then
    RESOURCE_LIMITS_MEMORY="$RESOURCE_LIMITS_MEMORY" jq -M ".spec.template.spec.containers[0].resources.limits.memory = env.RESOURCE_LIMITS_MEMORY" <"$DEPLOYMENT_FILE" >"$TMP_FILE"
    mv "$TMP_FILE" "$DEPLOYMENT_FILE"
  fi

  if [[ -n "$RESOURCE_REQUESTS_CPU" ]]; then
    RESOURCE_REQUESTS_CPU="$RESOURCE_REQUESTS_CPU" jq -M ".spec.template.spec.containers[0].resources.requests.cpu = env.RESOURCE_REQUESTS_CPU" <"$DEPLOYMENT_FILE" >"$TMP_FILE"
    mv "$TMP_FILE" "$DEPLOYMENT_FILE"
  fi

  if [[ -n "$RESOURCE_REQUESTS_MEMORY" ]]; then
    RESOURCE_REQUESTS_MEMORY="$RESOURCE_REQUESTS_MEMORY" jq -M ".spec.template.spec.containers[0].resources.requests.memory = env.RESOURCE_REQUESTS_MEMORY" <"$DEPLOYMENT_FILE" >"$TMP_FILE"
    mv "$TMP_FILE" "$DEPLOYMENT_FILE"
  fi
}

fn-set-healthchecks() {
  declare APP="$1" PROC_TYPE="$2" DEPLOYMENT_FILE="$3"
  local TMP_DIR=$(mktemp -d "/tmp/${FUNCNAME[0]}.XXXX")
  local APP_JSON_TMPL="$TMP_DIR/app.json.sigil"
  local APP_JSON_FILE="$TMP_DIR/app.json"
  local PROBE_FILE="$TMP_DIR/probe.json"
  local DEPLOYMENT_TMP_FILE="$TMP_DIR/deployment.json"
  trap 'rm -rf "$TMP_DIR" > /dev/null' RETURN INT TERM EXIT

  copy_from_image "$IMAGE" "app.json" "$APP_JSON_TMPL" 2>/dev/null || true

  if [[ ! -f "$APP_JSON_TMPL" ]]; then
    return 0
  fi

  # We use sigil templating to allow the health check configurations to refer
  # to the app name with the variable $APP.
  local SIGIL_PARAMS=(APP="$APP")
  sigil -f "$APP_JSON_TMPL" "${SIGIL_PARAMS[@]}" | cat -s >$APP_JSON_FILE

  for PROBE_TYPE in liveness readiness; do
    if jq -e -M ".healthchecks.\"$PROC_TYPE\".\"$PROBE_TYPE\"" <"$APP_JSON_FILE" >"$PROBE_FILE" \
      || jq -e -M ".healthchecks.\"*\".\"$PROBE_TYPE\"" <"$APP_JSON_FILE" >"$PROBE_FILE"; then
      jq -M --argjson data "$(cat "$PROBE_FILE")" ".spec.template.spec.containers[0].${PROBE_TYPE}Probe += \$data" <"$DEPLOYMENT_FILE" >"$DEPLOYMENT_TMP_FILE"
      mv "$DEPLOYMENT_TMP_FILE" "$DEPLOYMENT_FILE"
    fi
  done
}

fn-set-deployment-annotations() {
  declare APP="$1" DEPLOYMENT_FILE="$2"
  local TMP_FILE=$(mktemp "/tmp/${FUNCNAME[0]}.XXXX")
  trap 'rm -rf "$TMP_FILE" > /dev/null' RETURN INT TERM EXIT

  ANNOTATION_COUNT="$(fn-plugin-property-list-length "scheduler-kubernetes" "$APP" "deployment-annotations")"
  if [[ "$ANNOTATION_COUNT" == 0 ]]; then
    return
  fi

  jq -M --argjson data "{}" '.metadata.annotations += $data' <"$DEPLOYMENT_FILE" >"$TMP_FILE"
  mv "$TMP_FILE" "$DEPLOYMENT_FILE"

  while IFS="" read -r p || [ -n "$p" ]; do
    local KEY="$(echo "$p" | cut -d' ' -f1)"
    local VALUE="$(echo "$p" | cut -d' ' -f2)"
    KEY="$KEY" VALUE="$VALUE" jq -M '.metadata.annotations[env.KEY] = env.VALUE' <"$DEPLOYMENT_FILE" >"$TMP_FILE"
    mv "$TMP_FILE" "$DEPLOYMENT_FILE"
  done < <(fn-plugin-property-list-get "scheduler-kubernetes" "$APP" "deployment-annotations")
}

fn-set-pod-annotations() {
  declare APP="$1" DEPLOYMENT_FILE="$2"
  local TMP_FILE=$(mktemp "/tmp/${FUNCNAME[0]}.XXXX")
  trap 'rm -rf "$TMP_FILE" > /dev/null' RETURN INT TERM EXIT

  ANNOTATION_COUNT="$(fn-plugin-property-list-length "scheduler-kubernetes" "$APP" "pod-annotations")"
  if [[ "$ANNOTATION_COUNT" == 0 ]]; then
    return
  fi

  jq -M --argjson data "{}" '.spec.template.metadata.annotations += $data' <"$DEPLOYMENT_FILE" >"$TMP_FILE"
  mv "$TMP_FILE" "$DEPLOYMENT_FILE"

  while IFS="" read -r p || [ -n "$p" ]; do
    local KEY="$(echo "$p" | cut -d' ' -f1)"
    local VALUE="$(echo "$p" | cut -d' ' -f2)"
    KEY="$KEY" VALUE="$VALUE" jq -M '.spec.template.metadata.annotations[env.KEY] = env.VALUE' <"$DEPLOYMENT_FILE" >"$TMP_FILE"
    mv "$TMP_FILE" "$DEPLOYMENT_FILE"
  done < <(fn-plugin-property-list-get "scheduler-kubernetes" "$APP" "pod-annotations")
}

fn-set-service-annotations() {
  declare APP="$1" DEPLOYMENT_FILE="$2"
  local TMP_FILE=$(mktemp "/tmp/${FUNCNAME[0]}.XXXX")
  trap 'rm -rf "$TMP_FILE" > /dev/null' RETURN INT TERM EXIT

  ANNOTATION_COUNT="$(fn-plugin-property-list-length "scheduler-kubernetes" "$APP" "service-annotations")"
  if [[ "$ANNOTATION_COUNT" == 0 ]]; then
    return
  fi

  jq -M --argjson data "{}" '.metadata.annotations += $data' <"$DEPLOYMENT_FILE" >"$TMP_FILE"
  mv "$TMP_FILE" "$DEPLOYMENT_FILE"

  while IFS="" read -r p || [ -n "$p" ]; do
    local KEY="$(echo "$p" | cut -d' ' -f1)"
    local VALUE="$(echo "$p" | cut -d' ' -f2)"
    KEY="$KEY" VALUE="$VALUE" jq -M '.metadata.annotations[env.KEY] = env.VALUE' <"$DEPLOYMENT_FILE" >"$TMP_FILE"
    mv "$TMP_FILE" "$DEPLOYMENT_FILE"
  done < <(fn-plugin-property-list-get "scheduler-kubernetes" "$APP" "service-annotations")
}

scheduler-kubernetes-scheduler-deploy() {
  declare desc="deploys an image tag for a given application"
  declare trigger="scheduler-kubernetes scheduler-deploy"
  declare DOKKU_SCHEDULER="$1" APP="$2" IMAGE_TAG="$3"
  local DEPLOYMENT_TEMPLATE="$PLUGIN_AVAILABLE_PATH/scheduler-kubernetes/templates/deployment.json.sigil"
  local SERVICE_TEMPLATE="$PLUGIN_AVAILABLE_PATH/scheduler-kubernetes/templates/service.json.sigil"
  local KUBE_ARGS NAMESPACE

  if [[ "$DOKKU_SCHEDULER" != "kubernetes" ]]; then
    return
  fi

  local line PROC_TYPE PROC_COUNT CONTAINER_INDEX
  local DOKKU_SCALE_FILE="$DOKKU_ROOT/$APP/DOKKU_SCALE"
  local DEPLOYMENT_ID="$(date +%s)"
  local TMP_FILE=$(mktemp "/tmp/${FUNCNAME[0]}.XXXX")
  trap 'rm -rf "$TMP_FILE" > /dev/null' RETURN INT TERM EXIT

  dokku_log_info2 "Deploying via kubernetes"
  IMAGE=$(get_deploying_app_image_name "$APP" "$IMAGE_TAG")
  plugn trigger pre-deploy "$APP" "$IMAGE_TAG"

  export KUBECONFIG="${DOKKU_ROOT}/.kube/config"
  export KUBEDOG_KUBE_CONFIG="${DOKKU_ROOT}/.kube/config"
  KUBE_ARGS=()
  NAMESPACE="$(fn-plugin-property-get "scheduler-kubernetes" "$APP" "namespace" "")"
  if [[ -n "$NAMESPACE" ]]; then
    KUBE_ARGS+=("--namespace=$NAMESPACE")
    fn-scheduler-kubernetes-ensure-namespace "$NAMESPACE" >/dev/null
  fi

  IMAGE_PULL_SECRETS="$(fn-plugin-property-get "scheduler-kubernetes" "$APP" "imagePullSecrets" "")"

  while read -r line || [[ -n "$line" ]]; do
    [[ "$line" =~ ^#.* ]] && continue
    line="$(strip_inline_comments "$line")"
    PROC_TYPE=${line%%=*}
    PROC_COUNT=${line#*=}

    dokku_log_info1 "Deploying ${PROC_TYPE} to ${PROC_COUNT}"

    local SIGIL_PARAMS=(APP="$APP" IMAGE="$IMAGE" PROCESS_COUNT="$PROC_COUNT" PROCESS_TYPE="$PROC_TYPE" PORT="5000")

    sigil -f "$DEPLOYMENT_TEMPLATE" "${SIGIL_PARAMS[@]}" | cat -s >$TMP_FILE
    [[ "$PROC_TYPE" != "web" ]] && fn-strip-ports "$TMP_FILE"
    fn-set-env-vars "$APP" "$TMP_FILE"
    fn-set-ports "$APP" "$TMP_FILE"
    fn-set-resource-constraints "$APP" "$PROC_TYPE" "$TMP_FILE"
    fn-set-image-pull-secrets "$IMAGE_PULL_SECRETS" "$TMP_FILE"
    fn-set-healthchecks "$APP" "$PROC_TYPE" "$TMP_FILE"
    fn-set-deployment-annotations "$APP" "$TMP_FILE"
    fn-set-pod-annotations "$APP" "$TMP_FILE"

    plugn trigger pre-deploy-kubernetes-apply "$APP" "$PROC_TYPE" "$TMP_FILE" deployment

    "${DOKKU_LIB_ROOT}/data/scheduler-kubernetes/kubectl" "${KUBE_ARGS[@]}" apply -f "$TMP_FILE" | sed "s/^/       /"
    "${DOKKU_LIB_ROOT}/data/scheduler-kubernetes/kubedog" "${KUBE_ARGS[@]}" --timeout=600 rollout track deployment "${APP}-${PROC_TYPE}"

    if [[ "$PROC_TYPE" == "web" ]]; then
      sigil -f "$SERVICE_TEMPLATE" "${SIGIL_PARAMS[@]}" | cat -s >$TMP_FILE
      fn-set-service-annotations "$APP" "$TMP_FILE"
      plugn trigger pre-deploy-kubernetes-apply "$APP" "$PROC_TYPE" "$TMP_FILE" service
      "${DOKKU_LIB_ROOT}/data/scheduler-kubernetes/kubectl" "${KUBE_ARGS[@]}" apply -f "$TMP_FILE" | sed "s/^/       /"
      # "${DOKKU_LIB_ROOT}/data/scheduler-kubernetes/kubedog" "${KUBE_ARGS[@]}" --timeout=600 rollout track service "${APP}-${PROC_TYPE}"
    fi

    plugn trigger post-deploy-kubernetes-apply "$APP" "$PROC_TYPE" "$TMP_FILE" deployment
  done <"$DOKKU_SCALE_FILE"

  dokku_log_info2 "Deploy complete"

  dokku_log_info1 "Running post-deploy"
  plugn trigger core-post-deploy "$APP" "" "" "$IMAGE_TAG"
  plugn trigger post-deploy "$APP" "" "" "$IMAGE_TAG"
}

scheduler-kubernetes-scheduler-deploy "$@"
