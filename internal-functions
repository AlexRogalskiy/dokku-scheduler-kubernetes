#!/usr/bin/env bash
set -eo pipefail
[[ $DOKKU_TRACE ]] && set -x
source "$PLUGIN_CORE_AVAILABLE_PATH/common/functions"
source "$PLUGIN_CORE_AVAILABLE_PATH/common/property-functions"

cmd-scheduler-kubernetes-rolling-update() {
  declare desc="force a rolling update"
  local cmd="scheduler-kubernetes:rolling-update" argv=("$@")
  [[ ${argv[0]} == "$cmd" ]] && shift 1
  declare APP="$1"

  local DOKKU_SCHEDULER=$(get_app_scheduler "$APP")
  if [[ "$DOKKU_SCHEDULER" != "kubernetes" ]]; then
    dokku_log_fail "Scheduler for $APP is set to $DOKKU_SCHEDULER"
    return 1
  fi

  local DOKKU_SCALE_FILE="$DOKKU_ROOT/$APP/DOKKU_SCALE"
  if [[ ! -f "$DOKKU_SCALE_FILE" ]]; then
    dokku_log_fail "No processes found for $APP"
    return 1
  fi

  export KUBECONFIG="${DOKKU_ROOT}/.kube/config"
  export KUBEDOG_KUBE_CONFIG="${DOKKU_ROOT}/.kube/config"
  KUBE_ARGS=()
  NAMESPACE="$(fn-plugin-property-get "scheduler-kubernetes" "$APP" "namespace" "")"
  if [[ -n "$NAMESPACE" ]]; then
    KUBE_ARGS+=("--namespace=$NAMESPACE")
    fn-scheduler-kubernetes-ensure-namespace "$NAMESPACE" >/dev/null
  fi

  while read -r line || [[ -n "$line" ]]; do
    [[ "$line" =~ ^#.* ]] && continue
    line="$(strip_inline_comments "$line")"
    PROC_TYPE=${line%%=*}
    
    "${DOKKU_LIB_ROOT}/data/scheduler-kubernetes/kubectl" "${KUBE_ARGS[@]}" patch deployment "${APP}-${PROC_TYPE}" --patch "{\"spec\":{\"template\":{\"metadata\":{\"labels\":{\"dokku.com/rolling-update-time\":\"$(date -u "+%Y-%m-%d-%H-%M-%S")\"}}}}}" | sed "s/^/       /"
  done <"$DOKKU_SCALE_FILE"
}

cmd-scheduler-kubernetes-report() {
  declare desc="displays a scheduler-kubernetes report for one or more apps"
  local cmd="scheduler-kubernetes:report"
  local INSTALLED_APPS=$(dokku_apps)
  local APP="$2" INFO_FLAG="$3"

  if [[ -n "$APP" ]] && [[ "$APP" == --* ]]; then
    INFO_FLAG="$APP"
    APP=""
  fi

  if [[ -z "$APP" ]] && [[ -z "$INFO_FLAG" ]]; then
    INFO_FLAG="true"
  fi

  if [[ -z "$APP" ]]; then
    for app in $INSTALLED_APPS; do
      cmd-scheduler-kubernetes-report-single "$app" "$INFO_FLAG" | tee || true
    done
  else
    cmd-scheduler-kubernetes-report-single "$APP" "$INFO_FLAG"
  fi
}

cmd-scheduler-kubernetes-report-single() {
  declare APP="$1" INFO_FLAG="$2"
  if [[ "$INFO_FLAG" == "true" ]]; then
    INFO_FLAG=""
  fi
  verify_app_name "$APP"
  local flag_map=(
    "--scheduler-kubernetes-namespace: $(fn-plugin-property-get "scheduler-kubernetes" "$APP" "namespace" "")"
  )

  if [[ -z "$INFO_FLAG" ]]; then
    dokku_log_info2_quiet "${APP} scheduler-kubernetes information"
    for flag in "${flag_map[@]}"; do
      key="$(echo "${flag#--}" | cut -f1 -d' ' | tr - ' ')"
      dokku_log_verbose "$(printf "%-30s %-25s" "${key^}" "${flag#*: }")"
    done
  else
    local match=false
    local value_exists=false
    for flag in "${flag_map[@]}"; do
      valid_flags="${valid_flags} $(echo "$flag" | cut -d':' -f1)"
      if [[ "$flag" == "${INFO_FLAG}:"* ]]; then
        value=${flag#*: }
        size="${#value}"
        if [[ "$size" -ne 0 ]]; then
          echo "$value" && match=true && value_exists=true
        else
          match=true
        fi
      fi
    done
    [[ "$match" == "true" ]] || dokku_log_fail "Invalid flag passed, valid flags:${valid_flags}"
    [[ "$value_exists" == "true" ]] || dokku_log_fail "not deployed"
  fi
}

scheduler_docker_local_help_content_func() {
  declare desc="return scheduler-kubernetes plugin help content"
  cat <<help_content
    scheduler-kubernetes:report [<app>] [<flag>], Displays a scheduler-kubernetes report for one or more apps
    scheduler-kubernetes:set <app> <property> (<value>), Set or clear a scheduler-kubernetes property for an app
help_content
}

cmd-scheduler-kubernetes-help() {
  if [[ $1 == "scheduler-kubernetes:help" ]]; then
    echo -e 'Usage: dokku scheduler-kubernetes[:COMMAND]'
    echo ''
    echo 'Manages the scheduler-kubernetes integration for an app.'
    echo ''
    echo 'Additional commands:'
    scheduler_docker_local_help_content_func | sort | column -c2 -t -s,
    echo ''
  elif [[ $(ps -o command= $PPID) == *"--all"* ]]; then
    scheduler_docker_local_help_content_func
  else
    cat <<help_desc
    scheduler-kubernetes, Manages the scheduler-kubernetes integration for an app
help_desc
  fi
}

fn-scheduler-kubernetes-ensure-namespace() {
  declare NAMESPACE="$1"
  local NAMESPACE_TEMPLATE="$PLUGIN_AVAILABLE_PATH/scheduler-kubernetes/templates/namespace.json.sigil"
  local TMP_FILE=$(mktemp "/tmp/${FUNCNAME[0]}.XXXX")
  trap 'rm -rf "$TMP_FILE" > /dev/null' RETURN INT TERM EXIT

  SIGIL_PARAMS=(NAME="$NAMESPACE")
  sigil -f "$NAMESPACE_TEMPLATE" "${SIGIL_PARAMS[@]}" | cat -s >$TMP_FILE

  "${DOKKU_LIB_ROOT}/data/scheduler-kubernetes/kubectl" apply -f "$TMP_FILE" | sed "s/^/       /"
}
